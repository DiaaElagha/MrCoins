// <auto-generated />
using System;
using Coins.Data.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Coins.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211221182010_fix-add-rate")]
    partial class fixaddrate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresExtension("postgis")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Coins.Core.Models.Domins.Auth.UserCoins", b =>
                {
                    b.Property<int>("UserCoinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CoinExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CoinStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreateByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("text");

                    b.Property<float?>("InvoiceValue")
                        .HasColumnType("real");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDetected")
                        .HasColumnType("boolean");

                    b.Property<int>("NumberOfCoinCollected")
                        .HasColumnType("integer");

                    b.Property<int>("Remaining")
                        .HasColumnType("integer");

                    b.Property<int?>("SocialType")
                        .HasColumnType("integer");

                    b.Property<int?>("StoreBranchId")
                        .HasColumnType("integer");

                    b.Property<int>("StoreId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdateByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("UserCoinId");

                    b.HasIndex("CreateByUserId");

                    b.HasIndex("StoreBranchId");

                    b.HasIndex("StoreId");

                    b.HasIndex("UpdateByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCoins");
                });

            modelBuilder.Entity("Coins.Core.Models.Domins.Auth.UserSocialLogin", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("SocialType")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreateByUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LoginToken")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdateByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "SocialType");

                    b.HasIndex("CreateByUserId");

                    b.HasIndex("UpdateByUserId");

                    b.ToTable("UserSocialLogin");
                });

            modelBuilder.Entity("Coins.Core.Models.Domins.Auth.UserSocialStore", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("StoreBranchId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreateByUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("NumOfCoins")
                        .HasColumnType("integer");

                    b.Property<int>("SocialType")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdateByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "StoreBranchId");

                    b.HasIndex("CreateByUserId");

                    b.HasIndex("StoreBranchId");

                    b.HasIndex("UpdateByUserId");

                    b.ToTable("UserSocialStore");
                });

            modelBuilder.Entity("Coins.Core.Models.Domins.Auth.UserStores", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("StoreId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreateByUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LastVisitAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LastVisitStoreBranchId")
                        .HasColumnType("integer");

                    b.Property<int>("NumOfVisitStore")
                        .HasColumnType("integer");

                    b.Property<string>("ReferrralCode")
                        .HasColumnType("text");

                    b.Property<int>("TotalCoins")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdateByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "StoreId");

                    b.HasIndex("CreateByUserId");

                    b.HasIndex("LastVisitStoreBranchId");

                    b.HasIndex("StoreId");

                    b.HasIndex("UpdateByUserId");

                    b.ToTable("UserStores");
                });

            modelBuilder.Entity("Coins.Core.Models.Domins.Auth.UserVouchers", b =>
                {
                    b.Property<int>("UserVoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset?>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreateByUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRedeem")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdateByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("VoucherId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("VoucherStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VoucherStatus")
                        .HasColumnType("integer");

                    b.HasKey("UserVoucherId");

                    b.HasIndex("CreateByUserId");

                    b.HasIndex("UpdateByUserId");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("UserVouchers");
                });

            modelBuilder.Entity("Coins.Core.Models.Domins.Home.ContactUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset?>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreateByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Messege")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdateByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreateByUserId");

                    b.HasIndex("UpdateByUserId");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("Coins.Core.Models.Domins.Home.GeneralSettings", b =>
                {
                    b.Property<int>("SettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AppleStoreMrCoinsAppLink")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreateByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("GooglePlayMrCoinsAppLink")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdateByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("SettingId");

                    b.HasIndex("CreateByUserId");

                    b.HasIndex("UpdateByUserId");

                    b.ToTable("GeneralSettings");
                });

            modelBuilder.Entity("Coins.Core.Models.Domins.Social.MrCoinsSocialMedia", b =>
                {
                    b.Property<int>("MrCoinsSocialMediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset?>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreateByUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("SocialType")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdateByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("UrlLink")
                        .HasColumnType("text");

                    b.HasKey("MrCoinsSocialMediaId");

                    b.HasIndex("CreateByUserId");

                    b.HasIndex("UpdateByUserId");

                    b.ToTable("MrCoinsSocialMedia");
                });

            modelBuilder.Entity("Coins.Core.Models.Domins.Social.SocialTypesStores", b =>
                {
                    b.Property<int>("StoreId")
                        .HasColumnType("integer");

                    b.Property<int>("SocialType")
                        .HasColumnType("integer");

                    b.Property<int>("StoreBranchId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreateByUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("RewardNumberOfCoins")
                        .HasColumnType("integer");

                    b.Property<int>("RewardType")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdateByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("UrlLink")
                        .HasColumnType("text");

                    b.Property<int?>("VoucherId")
                        .HasColumnType("integer");

                    b.HasKey("StoreId", "SocialType", "StoreBranchId");

                    b.HasIndex("CreateByUserId");

                    b.HasIndex("StoreBranchId");

                    b.HasIndex("UpdateByUserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("SocialTypesStores");
                });

            modelBuilder.Entity("Coins.Core.Models.Domins.StoresInfo.Advantages", b =>
                {
                    b.Property<int>("AdvantageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AdvantageTitleAr")
                        .HasColumnType("text");

                    b.Property<string>("AdvantageTitleEn")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreateByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("IconImageId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdateByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("AdvantageId");

                    b.HasIndex("CreateByUserId");

                    b.HasIndex("UpdateByUserId");

                    b.ToTable("Advantages");
                });

            modelBuilder.Entity("Coins.Core.Models.Domins.StoresInfo.StoreCategory", b =>
                {
                    b.Property<int>("StoreCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset?>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreateByUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("StoreCategoryAttachmentId")
                        .HasColumnType("text");

                    b.Property<string>("StoreCategoryNameAr")
                        .HasColumnType("text");

                    b.Property<string>("StoreCategoryNameEn")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdateByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("StoreCategoryId");

                    b.HasIndex("CreateByUserId");

                    b.HasIndex("UpdateByUserId");

                    b.ToTable("StoreCategory");
                });

            modelBuilder.Entity("Coins.Core.Models.Domins.StoresInfo.StorePriceType", b =>
                {
                    b.Property<int>("StorePriceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset?>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreateByUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("StorePriceTypeAr")
                        .HasColumnType("text");

                    b.Property<string>("StorePriceTypeEn")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdateByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("StorePriceTypeId");

                    b.HasIndex("CreateByUserId");

                    b.HasIndex("UpdateByUserId");

                    b.ToTable("StorePriceType");
                });

            modelBuilder.Entity("Coins.Core.Models.Domins.StoresInfo.StoreRate", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("StoreBranchId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreateByUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<double>("RateValue")
                        .HasColumnType("double precision");

                    b.Property<int?>("StoresStoreId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdateByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "StoreBranchId");

                    b.HasIndex("CreateByUserId");

                    b.HasIndex("StoreBranchId");

                    b.HasIndex("StoresStoreId");

                    b.HasIndex("UpdateByUserId");

                    b.ToTable("StoreRate");
                });

            modelBuilder.Entity("Coins.Core.Models.Domins.StoresInfo.Stores", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset?>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreateByUserId")
                        .HasColumnType("uuid");

                    b.Property<float>("DefineCurrentCurrencyToCoins")
                        .HasColumnType("real");

                    b.Property<int>("DefineMaxCoinsToSpentVoucherDiscount")
                        .HasColumnType("integer");

                    b.Property<int>("DefineMinCoinsRedeemVoucherDiscount")
                        .HasColumnType("integer");

                    b.Property<int>("DefineNumOfReferralCustomerCoins")
                        .HasColumnType("integer");

                    b.Property<int?>("ExpiedCoinsAfterDays")
                        .HasColumnType("integer");

                    b.Property<int?>("FirstTimeVoucherId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActiveExpiedCoins")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActiveFirstTimeVoucher")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActiveGoogleMapRate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActiveMaxCoinsToSpentVoucherDiscount")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActiveMinCoinsRedeemVoucherDiscount")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActiveReferralFriend")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActiveVoucherDiscount")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActiveVoucherDiscountExpiredAfterDay")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublish")
                        .HasColumnType("boolean");

                    b.Property<string>("LogoImageId")
                        .HasColumnType("text");

                    b.Property<int>("NumberRedeemedCoinsForEveryCurrency")
                        .HasColumnType("integer");

                    b.Property<int?>("ReferralFriendVoucherId")
                        .HasColumnType("integer");

                    b.Property<int?>("StoreBranchsBranchId")
                        .HasColumnType("integer");

                    b.Property<int?>("StoreCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("StoreDescriptionAr")
                        .HasColumnType("text");

                    b.Property<string>("StoreDescriptionEn")
                        .HasColumnType("text");

                    b.Property<string>("StoreNameAr")
                        .HasColumnType("text");

                    b.Property<string>("StoreNameEn")
                        .HasColumnType("text");

                    b.Property<int?>("StorePriceTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("StoreProductsStoreProductId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdateByUserId")
                        .HasColumnType("uuid");

                    b.Property<int?>("VoucherDiscountExpiredAfterDay")
                        .HasColumnType("integer");

                    b.HasKey("StoreId");

                    b.HasIndex("CreateByUserId");

                    b.HasIndex("FirstTimeVoucherId");

                    b.HasIndex("ReferralFriendVoucherId");

                    b.HasIndex("StoreBranchsBranchId");

                    b.HasIndex("StoreCategoryId");

                    b.HasIndex("StorePriceTypeId");

                    b.HasIndex("StoreProductsStoreProductId");

                    b.HasIndex("UpdateByUserId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("Coins.Core.Models.Domins.StoresInfo.StoresProductsAttachments", b =>
                {
                    b.Property<int>("StoreProductAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AttachmentsId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreateByUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("StoreProductId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdateByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("StoreProductAttachmentId");

                    b.HasIndex("CreateByUserId");

                    b.HasIndex("StoreProductId");

                    b.HasIndex("UpdateByUserId");

                    b.ToTable("StoresProductsAttachments");
                });

            modelBuilder.Entity("Coins.Core.Models.Domins.StoresInfo.Voucher", b =>
                {
                    b.Property<int>("VoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset?>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreateByUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("NumOfCoins")
                        .HasColumnType("integer");

                    b.Property<int?>("StoreId")
                        .HasColumnType("integer");

                    b.Property<int?>("StoreProductsStoreProductId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdateByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("VoucherDescrptionAr")
                        .HasColumnType("text");

                    b.Property<string>("VoucherDescrptionEn")
                        .HasColumnType("text");

                    b.Property<float?>("VoucherDiscountValue")
                        .HasColumnType("real");

                    b.Property<int>("VoucherExpiredAfterDay")
                        .HasColumnType("integer");

                    b.Property<string>("VoucherMainAttachmentId")
                        .HasColumnType("text");

                    b.Property<string>("VoucherNameAr")
                        .HasColumnType("text");

                    b.Property<string>("VoucherNameEn")
                        .HasColumnType("text");

                    b.Property<string>("VoucherTerms")
                        .HasColumnType("text");

                    b.Property<int>("VoucherType")
                        .HasColumnType("integer");

                    b.HasKey("VoucherId");

                    b.HasIndex("CreateByUserId");

                    b.HasIndex("StoreId");

                    b.HasIndex("StoreProductsStoreProductId");

                    b.HasIndex("UpdateByUserId");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("Coins.Core.Models.Domins.Test.LocationTest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Point>("Location")
                        .HasColumnType("geometry");

                    b.HasKey("ID");

                    b.ToTable("LocationTests");
                });

            modelBuilder.Entity("Coins.Entities.Domins.Auth.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Coins.Entities.Domins.Auth.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("AccessToken")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("Birthdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("CodeHash")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("CodeSalt")
                        .HasColumnType("bytea");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeviceId")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FacebookId")
                        .HasColumnType("text");

                    b.Property<string>("FcmToken")
                        .HasColumnType("text");

                    b.Property<int?>("ForgetPasswordCode")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVerify")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("LastUserLatitudeLocation")
                        .HasColumnType("double precision");

                    b.Property<double?>("LastUserLongitudeLocation")
                        .HasColumnType("double precision");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int?>("StoreBranchId")
                        .HasColumnType("integer");

                    b.Property<int?>("StoreId")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("StoreBranchId");

                    b.HasIndex("StoreId");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8bfad551-a0f3-484d-a8b2-9de2331f6741"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a318e44-835a-4340-92b2-f559e50b81ef",
                            CreateAt = new DateTimeOffset(new DateTime(2021, 12, 21, 20, 20, 9, 828, DateTimeKind.Unspecified).AddTicks(661), new TimeSpan(0, 2, 0, 0, 0)),
                            EmailConfirmed = false,
                            FullName = "System Admin",
                            Gender = 0,
                            IsActive = true,
                            IsAnonymous = true,
                            IsVerify = false,
                            LastLogin = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LockoutEnabled = false,
                            PasswordHash = "AIaxISGu0Ck71LVassW63HRL49rXHfg7zX8XJ2JFBDW3/WesTdyzzFQQ2yByxN+HDA==",
                            PhoneNumberConfirmed = false,
                            Role = "Admin",
                            TwoFactorEnabled = false,
                            UserName = "mrcoins"
                        });
                });

            modelBuilder.Entity("Coins.Entities.Domins.Auth.UserLogs", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset?>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreateByUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LogDescription")
                        .HasColumnType("text");

                    b.Property<string>("LogTitle")
                        .HasColumnType("text");

                    b.Property<int?>("StoreBranchId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdateByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("LogId");

                    b.HasIndex("CreateByUserId");

                    b.HasIndex("StoreBranchId");

                    b.HasIndex("UpdateByUserId");

                    b.ToTable("UserLogs");
                });

            modelBuilder.Entity("Coins.Entities.Domins.Notification.MessageSMS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset?>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreateByUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<Guid?>("ReceverId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdateByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreateByUserId");

                    b.HasIndex("ReceverId");

                    b.HasIndex("UpdateByUserId");

                    b.ToTable("MessageSMS");
                });

            modelBuilder.Entity("Coins.Entities.Domins.Notification.Notifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<int>("NotificationType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ReceverId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("SendDateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReceverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Coins.Entities.Domins.StoresInfo.StoreBranchs", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("AvgRate")
                        .HasColumnType("double precision");

                    b.Property<string>("BranchDescriptionAr")
                        .HasColumnType("text");

                    b.Property<string>("BranchDescriptionEn")
                        .HasColumnType("text");

                    b.Property<double?>("BranchLatitudeLocation")
                        .HasColumnType("double precision");

                    b.Property<double?>("BranchLongitudeLocation")
                        .HasColumnType("double precision");

                    b.Property<string>("BranchMainAttachmentId")
                        .HasColumnType("text");

                    b.Property<string>("BranchNameAr")
                        .HasColumnType("text");

                    b.Property<string>("BranchNameEn")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreateByUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMainBranch")
                        .HasColumnType("boolean");

                    b.Property<Point>("Location")
                        .HasColumnType("geometry");

                    b.Property<int>("NumOfSearch")
                        .HasColumnType("integer");

                    b.Property<int>("StoreId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdateByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("BranchId");

                    b.HasIndex("CreateByUserId");

                    b.HasIndex("StoreId");

                    b.HasIndex("UpdateByUserId");

                    b.ToTable("StoreBranchs");
                });

            modelBuilder.Entity("Coins.Entities.Domins.StoresInfo.StoreBranchsAdvantages", b =>
                {
                    b.Property<int>("AdvantageId")
                        .HasColumnType("integer");

                    b.Property<int>("StoreBranchId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreateByUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdateByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("AdvantageId", "StoreBranchId");

                    b.HasIndex("CreateByUserId");

                    b.HasIndex("StoreBranchId");

                    b.HasIndex("UpdateByUserId");

                    b.ToTable("StoreBranchsAdvantages");
                });

            modelBuilder.Entity("Coins.Entities.Domins.StoresInfo.StoreProducts", b =>
                {
                    b.Property<int>("StoreProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset?>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreateByUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("StoreId")
                        .HasColumnType("integer");

                    b.Property<string>("StoreProductDescriptionAr")
                        .HasColumnType("text");

                    b.Property<string>("StoreProductDescriptionEn")
                        .HasColumnType("text");

                    b.Property<string>("StoreProductMainAttachmentId")
                        .HasColumnType("text");

                    b.Property<string>("StoreProductNameAr")
                        .HasColumnType("text");

                    b.Property<string>("StoreProductNameEn")
                        .HasColumnType("text");

                    b.Property<float?>("StoreProductPrice")
                        .HasColumnType("real");

                    b.Property<DateTimeOffset?>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdateByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("StoreProductId");

                    b.HasIndex("CreateByUserId");

                    b.HasIndex("StoreId");

                    b.HasIndex("UpdateByUserId");

                    b.ToTable("StoreProducts");
                });

            modelBuilder.Entity("Coins.Entities.Domins.StoresInfo.StoresBranchsAttachments", b =>
                {
                    b.Property<int>("StoreBranchAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AttachmentsId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreateByUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("StoreBranchId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdateByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("StoreBranchAttachmentId");

                    b.HasIndex("CreateByUserId");

                    b.HasIndex("StoreBranchId");

                    b.HasIndex("UpdateByUserId");

                    b.ToTable("StoresBranchsAttachments");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Coins.Core.Models.Domins.Auth.UserCoins", b =>
                {
                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserCreate")
                        .WithMany()
                        .HasForeignKey("CreateByUserId");

                    b.HasOne("Coins.Entities.Domins.StoresInfo.StoreBranchs", "StoreBranch")
                        .WithMany("UserCoinsList")
                        .HasForeignKey("StoreBranchId");

                    b.HasOne("Coins.Core.Models.Domins.StoresInfo.Stores", "Stores")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("UpdateByUserId");

                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "UserRelated")
                        .WithMany("UserCoinsList")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("ApplicationUserCreate");

                    b.Navigation("ApplicationUserUpdate");

                    b.Navigation("StoreBranch");

                    b.Navigation("Stores");

                    b.Navigation("UserRelated");
                });

            modelBuilder.Entity("Coins.Core.Models.Domins.Auth.UserSocialLogin", b =>
                {
                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserCreate")
                        .WithMany()
                        .HasForeignKey("CreateByUserId");

                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("UpdateByUserId");

                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "UserStore")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUserCreate");

                    b.Navigation("ApplicationUserUpdate");

                    b.Navigation("UserStore");
                });

            modelBuilder.Entity("Coins.Core.Models.Domins.Auth.UserSocialStore", b =>
                {
                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserCreate")
                        .WithMany()
                        .HasForeignKey("CreateByUserId");

                    b.HasOne("Coins.Entities.Domins.StoresInfo.StoreBranchs", "StoreBranch")
                        .WithMany()
                        .HasForeignKey("StoreBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("UpdateByUserId");

                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "UserStore")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUserCreate");

                    b.Navigation("ApplicationUserUpdate");

                    b.Navigation("StoreBranch");

                    b.Navigation("UserStore");
                });

            modelBuilder.Entity("Coins.Core.Models.Domins.Auth.UserStores", b =>
                {
                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserCreate")
                        .WithMany()
                        .HasForeignKey("CreateByUserId");

                    b.HasOne("Coins.Entities.Domins.StoresInfo.StoreBranchs", "LastVisitStoreBranch")
                        .WithMany("UserStoresList")
                        .HasForeignKey("LastVisitStoreBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coins.Core.Models.Domins.StoresInfo.Stores", "Store")
                        .WithMany("UserStoresList")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("UpdateByUserId");

                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "UserStore")
                        .WithMany("UserStoresList")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("ApplicationUserCreate");

                    b.Navigation("ApplicationUserUpdate");

                    b.Navigation("LastVisitStoreBranch");

                    b.Navigation("Store");

                    b.Navigation("UserStore");
                });

            modelBuilder.Entity("Coins.Core.Models.Domins.Auth.UserVouchers", b =>
                {
                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserCreate")
                        .WithMany()
                        .HasForeignKey("CreateByUserId");

                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("UpdateByUserId");

                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "UserRelated")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coins.Core.Models.Domins.StoresInfo.Voucher", "Voucher")
                        .WithMany()
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUserCreate");

                    b.Navigation("ApplicationUserUpdate");

                    b.Navigation("UserRelated");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("Coins.Core.Models.Domins.Home.ContactUs", b =>
                {
                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserCreate")
                        .WithMany()
                        .HasForeignKey("CreateByUserId");

                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("UpdateByUserId");

                    b.Navigation("ApplicationUserCreate");

                    b.Navigation("ApplicationUserUpdate");
                });

            modelBuilder.Entity("Coins.Core.Models.Domins.Home.GeneralSettings", b =>
                {
                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserCreate")
                        .WithMany()
                        .HasForeignKey("CreateByUserId");

                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("UpdateByUserId");

                    b.Navigation("ApplicationUserCreate");

                    b.Navigation("ApplicationUserUpdate");
                });

            modelBuilder.Entity("Coins.Core.Models.Domins.Social.MrCoinsSocialMedia", b =>
                {
                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserCreate")
                        .WithMany()
                        .HasForeignKey("CreateByUserId");

                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("UpdateByUserId");

                    b.Navigation("ApplicationUserCreate");

                    b.Navigation("ApplicationUserUpdate");
                });

            modelBuilder.Entity("Coins.Core.Models.Domins.Social.SocialTypesStores", b =>
                {
                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserCreate")
                        .WithMany()
                        .HasForeignKey("CreateByUserId");

                    b.HasOne("Coins.Entities.Domins.StoresInfo.StoreBranchs", "StoreBranch")
                        .WithMany()
                        .HasForeignKey("StoreBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coins.Core.Models.Domins.StoresInfo.Stores", "Store")
                        .WithMany("SocialTypesStoresList")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("UpdateByUserId");

                    b.HasOne("Coins.Core.Models.Domins.StoresInfo.Voucher", "Voucher")
                        .WithMany()
                        .HasForeignKey("VoucherId");

                    b.Navigation("ApplicationUserCreate");

                    b.Navigation("ApplicationUserUpdate");

                    b.Navigation("Store");

                    b.Navigation("StoreBranch");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("Coins.Core.Models.Domins.StoresInfo.Advantages", b =>
                {
                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserCreate")
                        .WithMany()
                        .HasForeignKey("CreateByUserId");

                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("UpdateByUserId");

                    b.Navigation("ApplicationUserCreate");

                    b.Navigation("ApplicationUserUpdate");
                });

            modelBuilder.Entity("Coins.Core.Models.Domins.StoresInfo.StoreCategory", b =>
                {
                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserCreate")
                        .WithMany()
                        .HasForeignKey("CreateByUserId");

                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("UpdateByUserId");

                    b.Navigation("ApplicationUserCreate");

                    b.Navigation("ApplicationUserUpdate");
                });

            modelBuilder.Entity("Coins.Core.Models.Domins.StoresInfo.StorePriceType", b =>
                {
                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserCreate")
                        .WithMany()
                        .HasForeignKey("CreateByUserId");

                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("UpdateByUserId");

                    b.Navigation("ApplicationUserCreate");

                    b.Navigation("ApplicationUserUpdate");
                });

            modelBuilder.Entity("Coins.Core.Models.Domins.StoresInfo.StoreRate", b =>
                {
                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserCreate")
                        .WithMany()
                        .HasForeignKey("CreateByUserId");

                    b.HasOne("Coins.Entities.Domins.StoresInfo.StoreBranchs", "StoreBranch")
                        .WithMany()
                        .HasForeignKey("StoreBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coins.Core.Models.Domins.StoresInfo.Stores", null)
                        .WithMany("StoreRateList")
                        .HasForeignKey("StoresStoreId");

                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("UpdateByUserId");

                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "UserRelated")
                        .WithMany("StoreRateList")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("ApplicationUserCreate");

                    b.Navigation("ApplicationUserUpdate");

                    b.Navigation("StoreBranch");

                    b.Navigation("UserRelated");
                });

            modelBuilder.Entity("Coins.Core.Models.Domins.StoresInfo.Stores", b =>
                {
                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserCreate")
                        .WithMany()
                        .HasForeignKey("CreateByUserId");

                    b.HasOne("Coins.Core.Models.Domins.StoresInfo.Voucher", "FirstTimeVoucher")
                        .WithMany()
                        .HasForeignKey("FirstTimeVoucherId");

                    b.HasOne("Coins.Core.Models.Domins.StoresInfo.Voucher", "ReferralFriendVoucher")
                        .WithMany()
                        .HasForeignKey("ReferralFriendVoucherId");

                    b.HasOne("Coins.Entities.Domins.StoresInfo.StoreBranchs", null)
                        .WithMany("StoresList")
                        .HasForeignKey("StoreBranchsBranchId");

                    b.HasOne("Coins.Core.Models.Domins.StoresInfo.StoreCategory", "StoreCategory")
                        .WithMany("StoresList")
                        .HasForeignKey("StoreCategoryId");

                    b.HasOne("Coins.Core.Models.Domins.StoresInfo.StorePriceType", "StorePriceType")
                        .WithMany("StoresList")
                        .HasForeignKey("StorePriceTypeId");

                    b.HasOne("Coins.Entities.Domins.StoresInfo.StoreProducts", null)
                        .WithMany("StoresList")
                        .HasForeignKey("StoreProductsStoreProductId");

                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("UpdateByUserId");

                    b.Navigation("ApplicationUserCreate");

                    b.Navigation("ApplicationUserUpdate");

                    b.Navigation("FirstTimeVoucher");

                    b.Navigation("ReferralFriendVoucher");

                    b.Navigation("StoreCategory");

                    b.Navigation("StorePriceType");
                });

            modelBuilder.Entity("Coins.Core.Models.Domins.StoresInfo.StoresProductsAttachments", b =>
                {
                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserCreate")
                        .WithMany()
                        .HasForeignKey("CreateByUserId");

                    b.HasOne("Coins.Entities.Domins.StoresInfo.StoreProducts", "StoreProduct")
                        .WithMany("StoresProductsAttachmentsList")
                        .HasForeignKey("StoreProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("UpdateByUserId");

                    b.Navigation("ApplicationUserCreate");

                    b.Navigation("ApplicationUserUpdate");

                    b.Navigation("StoreProduct");
                });

            modelBuilder.Entity("Coins.Core.Models.Domins.StoresInfo.Voucher", b =>
                {
                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserCreate")
                        .WithMany()
                        .HasForeignKey("CreateByUserId");

                    b.HasOne("Coins.Core.Models.Domins.StoresInfo.Stores", "Store")
                        .WithMany("VouchersList")
                        .HasForeignKey("StoreId");

                    b.HasOne("Coins.Entities.Domins.StoresInfo.StoreProducts", null)
                        .WithMany("VouchersList")
                        .HasForeignKey("StoreProductsStoreProductId");

                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("UpdateByUserId");

                    b.Navigation("ApplicationUserCreate");

                    b.Navigation("ApplicationUserUpdate");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Coins.Entities.Domins.Auth.ApplicationUser", b =>
                {
                    b.HasOne("Coins.Entities.Domins.StoresInfo.StoreBranchs", "StoreBranch")
                        .WithMany("UsersList")
                        .HasForeignKey("StoreBranchId");

                    b.HasOne("Coins.Core.Models.Domins.StoresInfo.Stores", "Store")
                        .WithMany("UsersList")
                        .HasForeignKey("StoreId");

                    b.Navigation("Store");

                    b.Navigation("StoreBranch");
                });

            modelBuilder.Entity("Coins.Entities.Domins.Auth.UserLogs", b =>
                {
                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserCreate")
                        .WithMany()
                        .HasForeignKey("CreateByUserId");

                    b.HasOne("Coins.Entities.Domins.StoresInfo.StoreBranchs", "StoreBranch")
                        .WithMany()
                        .HasForeignKey("StoreBranchId");

                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("UpdateByUserId");

                    b.Navigation("ApplicationUserCreate");

                    b.Navigation("ApplicationUserUpdate");

                    b.Navigation("StoreBranch");
                });

            modelBuilder.Entity("Coins.Entities.Domins.Notification.MessageSMS", b =>
                {
                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserCreate")
                        .WithMany()
                        .HasForeignKey("CreateByUserId");

                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserRecever")
                        .WithMany("MessageSMSReceverList")
                        .HasForeignKey("ReceverId");

                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("UpdateByUserId");

                    b.Navigation("ApplicationUserCreate");

                    b.Navigation("ApplicationUserRecever");

                    b.Navigation("ApplicationUserUpdate");
                });

            modelBuilder.Entity("Coins.Entities.Domins.Notification.Notifications", b =>
                {
                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserRecever")
                        .WithMany("NotificationsListRecever")
                        .HasForeignKey("ReceverId");

                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserSender")
                        .WithMany("NotificationsListSender")
                        .HasForeignKey("SenderId");

                    b.Navigation("ApplicationUserRecever");

                    b.Navigation("ApplicationUserSender");
                });

            modelBuilder.Entity("Coins.Entities.Domins.StoresInfo.StoreBranchs", b =>
                {
                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserCreate")
                        .WithMany()
                        .HasForeignKey("CreateByUserId");

                    b.HasOne("Coins.Core.Models.Domins.StoresInfo.Stores", "Store")
                        .WithMany("StoreBranchsList")
                        .HasForeignKey("StoreId")
                        .IsRequired();

                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("UpdateByUserId");

                    b.Navigation("ApplicationUserCreate");

                    b.Navigation("ApplicationUserUpdate");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Coins.Entities.Domins.StoresInfo.StoreBranchsAdvantages", b =>
                {
                    b.HasOne("Coins.Core.Models.Domins.StoresInfo.Advantages", "Advantage")
                        .WithMany("StoreBranchsAdvantagesList")
                        .HasForeignKey("AdvantageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserCreate")
                        .WithMany()
                        .HasForeignKey("CreateByUserId");

                    b.HasOne("Coins.Entities.Domins.StoresInfo.StoreBranchs", "StoreBranch")
                        .WithMany("StoreBranchsAdvantagesList")
                        .HasForeignKey("StoreBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("UpdateByUserId");

                    b.Navigation("Advantage");

                    b.Navigation("ApplicationUserCreate");

                    b.Navigation("ApplicationUserUpdate");

                    b.Navigation("StoreBranch");
                });

            modelBuilder.Entity("Coins.Entities.Domins.StoresInfo.StoreProducts", b =>
                {
                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserCreate")
                        .WithMany()
                        .HasForeignKey("CreateByUserId");

                    b.HasOne("Coins.Core.Models.Domins.StoresInfo.Stores", "Store")
                        .WithMany("StoreProductsList")
                        .HasForeignKey("StoreId")
                        .IsRequired();

                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("UpdateByUserId");

                    b.Navigation("ApplicationUserCreate");

                    b.Navigation("ApplicationUserUpdate");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Coins.Entities.Domins.StoresInfo.StoresBranchsAttachments", b =>
                {
                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserCreate")
                        .WithMany()
                        .HasForeignKey("CreateByUserId");

                    b.HasOne("Coins.Entities.Domins.StoresInfo.StoreBranchs", "StoreBranch")
                        .WithMany("StoresAttachmentsList")
                        .HasForeignKey("StoreBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", "ApplicationUserUpdate")
                        .WithMany()
                        .HasForeignKey("UpdateByUserId");

                    b.Navigation("ApplicationUserCreate");

                    b.Navigation("ApplicationUserUpdate");

                    b.Navigation("StoreBranch");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Coins.Entities.Domins.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Coins.Core.Models.Domins.StoresInfo.Advantages", b =>
                {
                    b.Navigation("StoreBranchsAdvantagesList");
                });

            modelBuilder.Entity("Coins.Core.Models.Domins.StoresInfo.StoreCategory", b =>
                {
                    b.Navigation("StoresList");
                });

            modelBuilder.Entity("Coins.Core.Models.Domins.StoresInfo.StorePriceType", b =>
                {
                    b.Navigation("StoresList");
                });

            modelBuilder.Entity("Coins.Core.Models.Domins.StoresInfo.Stores", b =>
                {
                    b.Navigation("SocialTypesStoresList");

                    b.Navigation("StoreBranchsList");

                    b.Navigation("StoreProductsList");

                    b.Navigation("StoreRateList");

                    b.Navigation("UsersList");

                    b.Navigation("UserStoresList");

                    b.Navigation("VouchersList");
                });

            modelBuilder.Entity("Coins.Entities.Domins.Auth.ApplicationUser", b =>
                {
                    b.Navigation("MessageSMSReceverList");

                    b.Navigation("NotificationsListRecever");

                    b.Navigation("NotificationsListSender");

                    b.Navigation("StoreRateList");

                    b.Navigation("UserCoinsList");

                    b.Navigation("UserStoresList");
                });

            modelBuilder.Entity("Coins.Entities.Domins.StoresInfo.StoreBranchs", b =>
                {
                    b.Navigation("StoreBranchsAdvantagesList");

                    b.Navigation("StoresAttachmentsList");

                    b.Navigation("StoresList");

                    b.Navigation("UserCoinsList");

                    b.Navigation("UsersList");

                    b.Navigation("UserStoresList");
                });

            modelBuilder.Entity("Coins.Entities.Domins.StoresInfo.StoreProducts", b =>
                {
                    b.Navigation("StoresList");

                    b.Navigation("StoresProductsAttachmentsList");

                    b.Navigation("VouchersList");
                });
#pragma warning restore 612, 618
        }
    }
}
